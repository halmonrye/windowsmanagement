<#.Synopsis 	For use when a VSS Writer shows as being in a 'Timed out' state.  Restarts the underlying services and re-checks to see if the writer is error free.	.Description	Many backup programs rely on the Volume Shadow Service (VSS) to perform backups of Windows servers and workstations.  Becuase of this, the health and well being of the various VSS writers is paramount to the smooth running of backups and disaster recovery programs.		This script will perform the following actions:		Check to see if there are any VSS writers in an errored state using the vssadmin utliity.  These writers show as 'Timed out' with a state of '[9] Failed'.		For errored writers, find the service and any dependent services and write them to a list		Stop all services in the list, in the correct order - dependencies first		Re-start all services in the list, in the correct order - non-subordinate services first		Check to see if there are any VSS writers still in an errored state		Produce an Audit Log for you to review	Prerequisites:		The script and the services.txt file must be in the same folder when run.		You may need to set Execution Policy in PowerShell "Set-ExecutionPolicy RemoteSigned"		Start PowerShell in Administrative mode	.Parameter <none>	There are no parameters for this version of this script.	 .Example	.\vss_restart.ps1.Notes	Author : Gill Hathorn - UpTime Sciences	WebSite: https://www.uptimesciences.com	Updates: Hal Noble - UpTime Sciences	WebSite: https://www.uptimesciences.com	Future Ideas:		Add logic for services stuck in StopPending state		Add 'Test Run' option		Locate services.txt in an alternate location			Updates		2018-03-08 - hn - Minor formatting changes - v0.2		2018-02-26 - hn - Initial version - v0.1#><#Param ([Parameter(Mandatory=$true)] [String]$Directory,[Parameter(Mandatory=$true)] [String]$ServicesFile)#>[System.Collections.ArrayList]$ServicesToRestart = @()[System.Collections.ArrayList]$FailedVSSWriters = @()[System.String]$writers = ""#Start Log Output	$transcriptpath = ".\" + "RestartVSSWriterServices" + "-" + (Get-Date).ToString('yyyy-MM-dd-mm-ss') + ".txt"	Start-Transcript -Path $transcriptpath################################################################################ Create Functions	###############################################################################	function Custom-GetDependServices ($ServiceInput)	{		Write-Output "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") -------------------------------------------"		Write-Output "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") Get Dependent Services"		#Write-Host "Name of `$ServiceInput: $($ServiceInput.Name)"		#Write-Host "Number of dependents: $($ServiceInput.DependentServices.Count)"		If ($ServiceInput.DependentServices.Count -gt 0)		{			ForEach ($DepService in $ServiceInput.DependentServices)			{				#Write-Host "Dependent of $($ServiceInput.Name): $($Service.Name)"				If ($DepService.Status -eq "Running")				{					#Write-Host "$($DepService.Name) is running."					$CurrentService = Get-Service -Name $DepService.Name										# Get dependencies of running service					Custom-GetDependServices $CurrentService                				}				Else				{					Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") $($DepService.Name) is not running. No Need to stop or start or check dependencies."				}				#If Service is stopping, note it and move along				If ($DepService.Status -eq "StopPending")				{					Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") $($DepService.Name) is in a StopPending state. It may really be stopping, or it may be stuck. MANUALLY CHECK THIS SERVICE"				}			}		}		Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") Service to Stop $($ServiceInput.Name)"		if ($ServicesToRestart.Contains($ServiceInput.Name) -eq $false)		{			Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") Adding service to stop $($ServiceInput.Name)"			$ServicesToRestart.Add($ServiceInput.Name)		}	}	function Custom-StartStop(){		Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") -------------------------------------------"		Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") Stopping Services"		Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") -------------------------------------------"		foreach($ServiceToStop in $ServicesToRestart)		{			Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") Stop Service $ServiceToStop"			Stop-Service $ServiceToStop -Verbose #-Force		}		[system.io.file]::WriteAllLines($Directory + "restart_"+ $ServicesFile, $ServicesToRestart)		Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") -------------------------------------------"		Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") Starting Services"		Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") -------------------------------------------"		# Reverse stop order to get start order		$ServicesToRestart.Reverse()		foreach($ServiceToRestart in $ServicesToRestart)		{			Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") Start Service $ServiceToRestart"			Start-Service $ServiceToRestart -Verbose		}		Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") -------------------------------------------"		Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") Restart of services completed"		Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") -------------------------------------------"	}	function Custom-CheckWriters(){		$writers = vssadmin list writers | Select-String -Context 0,4 '^writer name:' | ? {			$_.Context.PostContext[2].Trim() -ne "state: [1] stable" -or			$_.Context.PostContext[3].Trim() -ne "last error: no error"		} 		$writers | %{			$writer = $_ | Select-String '^writer name:'			$FailedVSSWriters.Add($writer.ToString().Substring(16,$writer.ToString().Length - 17))		}	}	function Custom-FillServices2Restart($FailedVSSWriters){		$services = <#Get-Content#>Import-CSV -Path ".\services.txt"		$FailedVSSWriters | ForEach-Object{			$servicename = $_			#lookup service name			$match = $services<#Import-Csv -Path ".\services.txt"#> | ? { $_.VSSWriter -eq $servicename}  			$match			# Get the main service			$Service = Get-Service -Name $match.ServiceName			# Get dependencies and stop order			Custom-GetDependServices -ServiceInput $Service		}	}	function Custom-restartADFS (){	   $Service = Get-Service -Name "ComSysApp"	   Custom-GetDependServices -ServiceInput $Service	   $Service = Get-Service -Name "COM+ Event System"#"ComSysApp"	   Custom-GetDependServices -ServiceInput $Service	   $Service = Get-Service -Name "Distributed Transaction Coordinator Service"#"ComSysApp"	   Custom-GetDependServices -ServiceInput $Service	   $Service = Get-Service -Name "Volume Shadow Copy Service"#"ComSysApp"	   Custom-GetDependServices -ServiceInput $Service	   Custom-StartStop	}################################################################################ Do the work###############################################################################	Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") -------------------------------------------"	Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") Check VSS Writers"	Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") -------------------------------------------"	Custom-CheckWriters	if($FailedVSSWriters){					Custom-FillServices2Restart($FailedVSSWriters)		Custom-StartStop	}	Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") -------------------------------------------"	Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") Check VSS Writers After Service Restarts"	Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") -------------------------------------------"	Custom-CheckWriters	Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") -------------------------------------------"	Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") Check ADFS"	Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") -------------------------------------------"	if($FailedVSSWriters){		$ServicesToRestart = @{}	   	   Custom-restartADFS	   Custom-StartStop	   Custom-CheckWriters	   if($FailedVSSWriters){			Custom-FillServices2Restart($FailedVSSWriters)			Custom-StartStop		} 	}	Stop-Transcript