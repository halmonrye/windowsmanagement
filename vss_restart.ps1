<#.Synopsis 	For use when a VSS Writer shows as being in a 'Timed out' state.  Restarts the underlying services and re-checks to see if the writer is error free.	.Description	Many backup programs rely on the Volume Shadow Service (VSS) to perform backups of Windows servers and workstations.  Because of this, the health and well being of the various VSS services is paramount to the smooth running of backups and disaster recovery programs.  This script uses a separate services.txt file that keeps track of services upon which VSS writers depend.  As new VSS services are added to Windows they can be added to the services.txt file.		This script will perform the following actions:		Check to see if there are any VSS writers in an errored state using the vssadmin utliity.  These writers show as 'Timed out' with a state of '[9] Failed'.		For errored writers, find the service and any dependent services and write them to a list		Stop all services in the list		Re-start all services in the list		Check to see if there are any VSS writers still in an errored state		Produce an Audit Log for you to review	Prerequisites:		The script and the services.txt file must be in the same folder when run.		You may need to set Execution Policy in PowerShell "Set-ExecutionPolicy RemoteSigned"		Start PowerShell in Administrative mode	.Parameter <none>	There are no parameters for this version of this script.	 .Example	vss_restart.ps1.Notes	Author : Gill Hathorn - UpTime Sciences	WebSite: https://www.uptimesciences.com	Updates: Hal Noble - UpTime Sciences	WebSite: https://www.uptimesciences.com	Future Ideas:		Add 'Test Run' option			Updates		2018-02-26 - hn - Initial version - v0.1#><#Param ([Parameter(Mandatory=$true)] [String]$Directory,[Parameter(Mandatory=$true)] [String]$ServicesFile)#>
[System.Collections.ArrayList]$ServicesToRestart = @()
[System.Collections.ArrayList]$FailedVSSWriters = @()
[System.String]$writers = ""
#Start Log Output	$transcriptpath = ".\" + "RestartVSSWriterServices" + "-" + (Get-Date).ToString('yyyy-MM-dd-mm-ss') + ".txt"	Start-Transcript -Path $transcriptpath	
function Custom-GetDependServices ($ServiceInput){	Write-Output "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") -------------------------------------------"	Write-Output "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") Get Dependent Services"	#Write-Host "Name of `$ServiceInput: $($ServiceInput.Name)"	#Write-Host "Number of dependents: $($ServiceInput.DependentServices.Count)"	If ($ServiceInput.DependentServices.Count -gt 0)	{		ForEach ($DepService in $ServiceInput.DependentServices)		{			#Write-Host "Dependent of $($ServiceInput.Name): $($Service.Name)"			If ($DepService.Status -eq "Running")			{				#Write-Host "$($DepService.Name) is running."				$CurrentService = Get-Service -Name $DepService.Name				                # get dependancies of running service				Custom-GetDependServices $CurrentService                			}			Else			{				Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") $($DepService.Name) is stopped. No Need to stop or start or check dependancies."			}					}	}    Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") Service to Stop $($ServiceInput.Name)"    if ($ServicesToRestart.Contains($ServiceInput.Name) -eq $false)    {        Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") Adding service to stop $($ServiceInput.Name)"        $ServicesToRestart.Add($ServiceInput.Name)    }}function custom-StartStop(){    Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") -------------------------------------------"    Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") Stopping Services"    Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") -------------------------------------------"    foreach($ServiceToStop in $ServicesToRestart)    {        Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") Stop Service $ServiceToStop"        Stop-Service $ServiceToStop -Verbose #-Force    }
	[system.io.file]::WriteAllLines($Directory + "restart_"+ $ServicesFile, $ServicesToRestart)
	Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") -------------------------------------------"    Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") Starting Services"    Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") -------------------------------------------"    # Reverse stop order to get start order    $ServicesToRestart.Reverse()    foreach($ServiceToRestart in $ServicesToRestart)    {        Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") Start Service $ServiceToRestart"        Start-Service $ServiceToRestart -Verbose    }    Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") -------------------------------------------"    Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") Restart of services completed"    Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") -------------------------------------------"}function custom-CheckWriters(){    $writers = vssadmin list writers | Select-String -Context 0,4 '^writer name:' | ? {
        $_.Context.PostContext[2].Trim() -ne "state: [1] stable" -or
        $_.Context.PostContext[3].Trim() -ne "last error: no error"
    }     $writers | %{        $writer = $_ | Select-String '^writer name:'        $FailedVSSWriters.Add($writer.ToString().Substring(16,$writer.ToString().Length - 17))    }}function custom-FillServices2Restart($FailedVSSWriters){    $services = <#Get-Content#>Import-CSV -Path ".\services.txt"    $FailedVSSWriters | ForEach-Object{
        $servicename = $_        #lookup service name        $match = $services<#Import-Csv -Path ".\services.txt"#> | ? { $_.VSSWriter -eq $servicename}          $match        # Get the main service        $Service = Get-Service -Name $match.ServiceName        # Get dependancies and stop order        Custom-GetDependServices -ServiceInput $Service    }}function custom-restartADFS (){   $Service = Get-Service -Name "ComSysApp"
   Custom-GetDependServices -ServiceInput $Service   $Service = Get-Service -Name "COM+ Event System"#"ComSysApp"
   Custom-GetDependServices -ServiceInput $Service   $Service = Get-Service -Name "Distributed Transaction Coordinator Service"#"ComSysApp"
   Custom-GetDependServices -ServiceInput $Service   $Service = Get-Service -Name "Volume Shadow Copy Service"#"ComSysApp"
   Custom-GetDependServices -ServiceInput $Service   custom-StartStop}Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") -------------------------------------------"Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") Check VSS Writers"Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") -------------------------------------------"custom-CheckWritersif($FailedVSSWriters){            custom-FillServices2Restart($FailedVSSWriters)    custom-StartStop
}

Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") -------------------------------------------"Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") Check VSS Writers After Service Restarts"Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") -------------------------------------------"custom-CheckWritersWrite-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") -------------------------------------------"Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") Check ADFS"Write-Host "$(Get-Date -UFormat "%Y-%m-%d_%H:%M:%S") -------------------------------------------"if($FailedVSSWriters){
    $ServicesToRestart = @{}
   
   custom-restartADFS
   custom-StartStop

   custom-CheckWriters
   if($FailedVSSWriters){
        custom-FillServices2Restart($FailedVSSWriters)        custom-StartStop
    } 
}

Stop-Transcript